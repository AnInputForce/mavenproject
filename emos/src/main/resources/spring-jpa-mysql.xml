<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p" 
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
			http://www.springframework.org/schema/beans 
			http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
			http://www.springframework.org/schema/tx 
			http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context-3.1.xsd
			http://www.springframework.org/schema/jdbc 
			http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
    		http://www.springframework.org/schema/data/jpa
   			http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
			http://www.springframework.org/schema/util 
			http://www.springframework.org/schema/util/spring-util-3.1.xsd"> 

  <!-- 如果在spring所有配置文件中出现一个以上 context:property-placeholder来加载不同properties文件，一定会报
      "Could not resolve placeholder" 错误，Spring 3.0之后可以在每一处都增加 ignore-unresolvable="true" 来规避
      参考 http://aoyi.iteye.com/blog/1151757
  -->
  <!--另一种解决办法：如果需要引入多个properties文件，可以用逗号分隔。-->
   
  <context:property-placeholder location="classpath:dbcpconfig-spring.properties" ignore-unresolvable="true"/>
 
  <tx:annotation-driven transaction-manager="transactionManager" />	
  	
  <!-- Declare a datasource that has pooling capabilities-->	 
 
  <bean id="jpaDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
    <property name="driverClassName" value="${db.mysql.jdbc.driverClassName}" />
    <property name="url" value="${db.mysql.jdbc.url}" />
    <property name="username" value="${db.mysql.jdbc.username}" />
    <property name="password" value="${db.mysql.jdbc.password}"/>
    <!--     连接池启动时的初始值  
    <property name="initialSize" value="${initialSize}" />
     连接池的最大值 
    <property name="maxActive" value="${maxActive}"/>
     最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 
    <property name="maxIdle" value="${maxIdle}"/>
     最小空闲值，当空闲的连接数少于阀值时，连接池就会去申请一些连接，以免洪峰来时来不及申请 
    <property name="minIdle" value="${minIdle}" />-->
  </bean>
  <!-- Declare a JPA entityManagerFactory -->
  <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean" 
        p:packagesToScan="com.guloulou.domain"
        p:dataSource-ref="jpaDataSource"
        p:jpaVendorAdapter-ref="hibernateVendor"
        p:jpaPropertyMap-ref="jpaPropertyMap"
  />
  <!--p:packagesToScan="org.springframework.data.jpa.example.domain"-->
  <!--
    //1：value="create-drop" 表示当JPA应用的时候自动创建表，在解应用的时候删除相应的表，这个在做测试的时候比较有用，但在开发过程中不这么用
    //2：value="create"这个在每次应用启动的时候都会创建数据库表（会删除以前数据库里的数据。
    //3：value="update" 这个属性的作用是a:每次只会更新数据库表里的信息,在entityBean添加或删除字段的时候会同步到数据库中的表
  -->
  <util:map id="jpaPropertyMap" >    
    <entry key="hibernate.hbm2ddl.auto" value="update"/>
    <entry key="hibernate.dialect" value="org.hibernate.dialect.MySQL5InnoDBDialect"/>
    <entry key="hibernate.show_sql" value="true"/>
    <entry key="hibernate.format_sql" value="true"/>
  </util:map>


  <bean id="hibernateVendor" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"
        p:showSql="false"/>

  <!-- Declare a transaction manager-->
  <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager" 
        p:entityManagerFactory-ref="entityManagerFactory"/>

  <!--  <jdbc:initialize-database data-source="jpaDataSource" enabled="${db.mysql.init}">
    <jdbc:script location="${db.mysql.data.test}"/>
  </jdbc:initialize-database>-->
</beans>